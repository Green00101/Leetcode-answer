Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

Example:

Input: head = 1->4->3->2->5->2, x = 3
Output: 1->2->2->4->3->5

给定一个链表和一个特定值 x，对链表进行分隔，使得所有小于 x 的节点都在大于或等于 x 的节点之前。

你应当保留两个分区中每个节点的初始相对位置。

示例:

输入: head = 1->4->3->2->5->2, x = 3
输出: 1->2->2->4->3->5

code 代码 ↓

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        ListNode more(0);
        ListNode less(0);
        ListNode* more_p = &more;
        ListNode* less_p = &less;
        while(head){
            if(head -> val < x){
                less_p -> next = head;
                less_p = less_p -> next;
            }
            else{
                more_p -> next = head;
                more_p = more_p -> next; 
            }
            head = head -> next;
        }
        less_p -> next = more. next;
        more_p -> next = NULL;
        return less. next;
    }
};

1.Creat two new link lists, more and less
2.If value is smaller than x, connected to the back of less, else,connected to theback of more
3.Connected the less's tail and more's next
4.Return less's next


1.建立两个新链表，more和less
2.数小于x，连接到less后面，否则，连接到more后面
3.把less的尾部和more的第二个连起来
4.返回less的下一个


preserve 保留
partition 划分
relative order 相对顺序
