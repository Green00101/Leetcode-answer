Reverse a linked list from position m to n. Do it in one-pass.

Note: 1 ≤ m ≤ n ≤ length of list.

Example:

Input: 1->2->3->4->5->NULL, m = 2, n = 4
Output: 1->4->3->2->5->NULL


反转从位置 m 到 n 的链表。请使用一趟扫描完成反转。

说明:
1 ≤ m ≤ n ≤ 链表长度。

示例:

输入: 1->2->3->4->5->NULL, m = 2, n = 4
输出: 1->4->3->2->5->NULL

code 代码 ↓

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int m, int n) {
        ListNode* p = new ListNode(0);
        ListNode* pre = p;
        p -> next = head;
        for(int i = 0; i < m - 1 ; i++)
            pre = pre -> next;
        ListNode* cur = pre -> next;
        for(int i = m; i < n; i++){
            ListNode* t = cur -> next;
            cur -> next = t -> next;
            t -> next = pre -> next;
            pre -> next = t;
        }
        return p -> next;
    }
};

1.Find m
2.Reverse m to n(Reverse Linked List I)

1.找m
2.翻转m到n(反转链表 I)
