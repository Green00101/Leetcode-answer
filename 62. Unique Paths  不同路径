A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

How many possible unique paths are there?

Above is a 7 x 3 grid. How many possible unique paths are there?

Note: m and n will be at most 100.

Example 1:

Input: m = 3, n = 2
Output: 3
Explanation:
From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Right -> Down
2. Right -> Down -> Right
3. Down -> Right -> Right
Example 2:

Input: m = 7, n = 3
Output: 28

一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。

机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。

问总共有多少条不同的路径？



例如，上图是一个7 x 3 的网格。有多少可能的路径？

说明：m 和 n 的值均不超过 100。

示例 1:

输入: m = 3, n = 2
输出: 3
解释:
从左上角开始，总共有 3 条路径可以到达右下角。
1. 向右 -> 向右 -> 向下
2. 向右 -> 向下 -> 向右
3. 向下 -> 向右 -> 向右
示例 2:

输入: m = 7, n = 3
输出: 28

code 代码 ↓

int a [101][101] = {0};
class Solution {
public:
    int uniquePaths(int m, int n) {
        if(m < 0 || n < 0)
            return 0;
        else if(m == 1 || n ==1)
            return 1;
        else if(m == 2 && n == 2)
            return 2;
        else if((m == 3 && n == 2) || (m == 2 && n == 3))
            return 3;
        else if(a[m][n] > 0)
            return a[m][n];
        a[m - 1][n] = uniquePaths(m - 1,n);
        a[m][n - 1] = uniquePaths(m, n-1);
        a[m][n] = a[m - 1][n] + a[m][n - 1];
        return a[m][n];
    }
};


1.Define a two-bits arry outside the class(otherwise it will time out, this arry avoid duplicate calculations)
2.The method of reaching a point is the method of reaching the top point plus the method of reaching the left point
3.Recursive

1.在类外定义一个二位数组(在类里定义会超时, 能避免重复计算)
2.到一个点的方法等于到上面的点的方法加上到左边的点的方法
3.递归

diagram 图
grid 格线
