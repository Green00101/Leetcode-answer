Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.

Note: You may not slant the container and n is at least 2.

 


The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.

 

Example:

Input: [1,8,6,2,5,4,8,3,7]
Output: 49

给定 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。

说明：你不能倾斜容器，且 n 的值至少为 2。



图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。

 

示例:

输入: [1,8,6,2,5,4,8,3,7]
输出: 49

code 代码 ↓

class Solution {
public:
    int maxArea(vector<int>& height) {
 int N = height.size();
        int res = 0;
        int left = height[0];
        int right = height[N - 1];
        res = (N - 1) * min(left, right);
        int l = 0;
        int r = N - 1;
        while (l < r) {
            if (left > right) {
                while (l < r && height[--r] <= right);
                if (l >= r) break;
                right = height[r];
                res = max(res, (r - l) * min(left, right));
            } else {
                while (l < r && height[++l] <= left);
                if (l >= r) break;
                left = height[l];
                res = max(res, (r - l) * min(left, right));
            }
        }
        return res;
    }
};
