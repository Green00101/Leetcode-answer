Given a linked list, remove the n-th node from the end of list and return its head.
Example:

Given linked list: 1->2->3->4->5, and n = 2.

After removing the second node from the end, the linked list becomes 1->2->3->5.

Note:

Given n will always be valid.

Follow up:

Could you do this in one pass?

给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。

示例：

给定一个链表: 1->2->3->4->5, 和 n = 2.

当删除了倒数第二个节点后，链表变为 1->2->3->5.
说明：

给定的 n 保证是有效的。

进阶：

你能尝试使用一趟扫描实现吗？

code  代码 ↓

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        if(head == NULL || head -> next == NULL)
            return NULL;
        ListNode* fast = head;
        ListNode* slow = head;
        for(int i = 0; i < n; i++)
            fast = fast -> next;
        if(fast == NULL){
            ListNode* p = head -> next;
            delete head;
            return p;
        }
        while(fast -> next){
            fast = fast -> next;
            slow = slow -> next;
        }
        ListNode* p = slow -> next;
        slow -> next = slow -> next -> next;
        delete p;
        return head;
    }
};

1.Decide the link list is null or only one node(You need used the second node)
2.Let fast move n bits first
3.If fast is null, return the second node(that means n is 1)
4.If fast isn't the last node, let two pointers move one bit
5.Delete the slow node


1.判head和head->next 空
2.让fast先移动n位
3.当fast为空时，说明n = 1
4.当fast不是最后一个节点，让fast和slow都后移
5.删除slow所指的节点


valid 有效
