Implement pow(x, n), which calculates x raised to the power n (xn).

Example 1:

Input: 2.00000, 10
Output: 1024.00000
Example 2:

Input: 2.10000, 3
Output: 9.26100
Example 3:

Input: 2.00000, -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25
Note:

-100.0 < x < 100.0
n is a 32-bit signed integer, within the range [−231, 231 − 1]

实现 pow(x, n) ，即计算 x 的 n 次幂函数。

示例 1:

输入: 2.00000, 10
输出: 1024.00000
示例 2:

输入: 2.10000, 3
输出: 9.26100
示例 3:

输入: 2.00000, -2
输出: 0.25000
解释: 2-2 = 1/22 = 1/4 = 0.25
说明:

-100.0 < x < 100.0
n 是 32 位有符号整数，其数值范围是 [−231, 231 − 1] 。

code 代码 ↓

class Solution {
public:
    double myPow(double x, int n) {
        if(n == 0)
            return 1;
        if(n == 1)
            return x;
        if(n == -1)
            return 1 / x;
        double half = myPow(x, n / 2);
        double rest = myPow(x, n % 2);
        return rest * half * half;
    }
};

When n is a even, that means x ^ n = x ^ (n / 2) * x ^ (n / 2)
When n is a odd, that means x ^ n = x ^ (n / 2) * x ^ (n / 2) * x
In fact, calculates x ^ (n / 2) can reduce multiplication by half
When n < 0, find x ^ n first, then find 1 / x ^ n

n为偶数意味着x ^ n = x ^ (n / 2) * x ^ (n / 2)
n为奇数意味着x ^ n = x ^ (n / 2) * x ^ (n / 2) * x
所以先算出x ^ (n / 2)就能减少一半的乘法
当n小于0时，先算出x ^ n在算出1 / x ^ n

Implement 实现
calculates x raised to the power n 计算x的n次幂
